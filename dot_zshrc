# start tmux when start a new terminal
# if [[ -z "$TMUX" ]] && [[ "$TERM" != "screen" ]] && [[ "$TERM" != "tmux" ]]; then
#     tmux attach -t default 2>/dev/null || tmux new -s default
# fi

# ---------------------- default settings ------------------------------------
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:/usr/local/bin:$HOME/go/bin:$HOME/.local/bin:/usr/local/go/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"


# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git zsh-autosuggestions)

source $ZSH/oh-my-zsh.sh

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# ---------------------- User configuration ----------------------------------

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# ------------------------- develop toolchain settings -----------------------
# bash completion compatibility for zsh
autoload -U +X bashcompinit && bashcompinit
autoload -U +X compinit && compinit

# load incus auto completion
# source /usr/share/bash-completion/bash_completion 2>/dev/null
# source /usr/share/bash-completion/completions/incus
source <(incus completion zsh)

# nvm
# preload nvm on shell start
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

# kubectl
source <(kubectl completion zsh)
alias k='kubectl'

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# ssh-agent
if [[ -z "$SSH_AUTH_SOCK" ]] ; then
    systemctl --user enable --now ssh-agent.service
fi
export SSH_AUTH_SOCK="$XDG_RUNTIME_DIR/ssh-agent.socket"

if [[ "$TERM" == "xterm" ]]; then
    export TERM=xterm-256color
fi


# ------------------------ self defined functions ----------------------------
# function to create a new tmux session with the name of the current directory
function tat {
    name=$(basename $(pwd) | sed -e 's/\.//g')
    if [ $(pwd) = $HOME ]; then
        name="default"
    fi


    if ! tmux ls 2>&1 | grep -E "^$name:"; then
        if [ -f .envrc ]; then
            direnv exec / tmux new-session -s "$name" -d
        else
            # start tmux at detached mode
            tmux new-session -s "$name" -d
        fi
    fi

    if [ -z "$TMUX" ]; then
        tmux attach -t "$name" -c "$(pwd)"
    else
        tmux switch-client -t "$name"
    fi
}

# attach to lxd container with username 
function goincus(){
    if [[ $# -eq 0 ]]; then
        echo "Usage: $0 <container or vm name> [namespace] [username]" >&2
        echo ""
        echo "attach to lxd container with uid 1000"
        echo "    namespace: default is current namespace"
        echo "    uid: default is 1000" >&2
        return 1;
    fi
    instance="$1"; shift;
    project="";
    uid="efficacy38";

    if [[ $# -gt 0 ]]; then
        project=$1; shift;
    fi

    if [[ $# -gt 0 ]]; then
        uid=$1; shift;
    fi

    if [[ -z "$project" ]]; then
        echo "\nenter the $instance at current project\n"
        incus exec $instance -- sudo -iu "$uid"
    else
        echo "\nenter the $instance at project $project\n"
        incus exec --project $project $instance -- sudo -iu "$uid"
    fi
}

# ssh-agent
function add-ssh-key() {
for key in ~/.ssh/id_ed25519 ~/.ssh/id_sysadm; do
    # add ssh-key to ssh-agent if not yet added into
	if [[ -f "$key" ]]; then
	 	ssh-add "$key"
	fi
done
}

function add-lxd-home() {
    if [[ "$#" -ne 1 ]]; then
        echo "Usage: $0 <container name>" >&2
        return 1;
    fi
    read "add_disk?add directory would restart the container/VM, proceed? [Y/n]"
    [[ "$add_disk" =~ '^[Yy]$|^$' ]] || break
	grep -qE "^[Yy]$|^$" <<< "$add_disk" || break
    incus stop $1
    incus config device add $1 homeDir disk source=/home// path=/$HOME/
    incus config set $1 raw.idmap "both 1000 1000"
    incus start $1
}

# create a new dev container
function add-dev-ct(){
    docker run -itd \
        --name dev-ct \
        --hostname dev-ct \
        -e XDG_RUNTIME_DIR=/tmp \
        -e WAYLAND_DISPLAY=$WAYLAND_DISPLAY \
        -v $XDG_RUNTIME_DIR/$WAYLAND_DISPLAY:/tmp/$WAYLAND_DISPLAY \
        -v /home/:/$HOME \
        dev-ct
}

function go-dev-ct(){
    # get current dev containers
    dev_cts=$(podman ps -a --filter name=dev-ct --format "{{.Names}}")
}

# $1: alias
# $2: command
function aliasIfExist(){
    command_base="$(echo $2 | cut -d' ' -f1)"
    if command -v "$command_base" >/dev/null; then
        alias $1=$2
    fi
}

function init-dev-ct(){
    for devenv in dev-personal; do
        {
            home_vol=${devenv}-home
            podman volume create $home_vol
            podman run --name=$devenv -d --privileged \
                -v $home_vol:/home/ \
                -v /home//Nextcloud:/$HOME/Nextcloud \
                -v /home//Tmp:/$HOME/Tmp \
                -v /tmp/.X11-unix:/tmp/.X11-unix \
                --restart unless-stopped \
                dev-ct:latest

        } || {
            echo "failed to create $devenv"
            continue
        }

        # generate podman systemd service
        if unit_file=$(podman generate systemd --new --name $devenv --files); then
            echo "unit file generated at $unit_file"
            mv $unit_file ~/.config/systemd/user/
            systemctl --user daemon-reload
            systemctl --user enable --now $devenv
        fi
    done
}

[[ -s "/home//.gvm/scripts/gvm" ]] && source "/$HOME/.gvm/scripts/gvm"

# ---------------------------- alias section ---------------------------------
# user defined settings
export EDITOR=vim
export PATH="/home/.cargo/bin:${KREW_ROOT:-$HOME/.krew}/bin:/$HOME/.local/share/bob/nvim-bin:$PATH"

# short cut alias
aliasIfExist cat bat
aliasIfExist cat batcat
aliasIfExist godev 'incus exec --project default dev -- sudo -iu '
aliasIfExist bye 'sudo poweroff'
aliasIfExist k kubectl
aliasIfExist reboot 'sudo reboot'
# alias cscc_work='sudo $HOME/.local/bin/cscc_work'
aliasIfExist 'cdt' 'cd ~/Tmp'
alias chproj='incus project switch'
# aliasIfExist ssh "kitty +kitten ssh"

if [ "$XDG_SESSION_TYPE" = "wayland" ]; then
    aliasIfExist 'copy' 'wl-copy'
else
    aliasIfExist 'copy' 'xclip -sel clip'
fi

# overriding alias
aliasIfExist vim nvim
aliasIfExist vi vim
aliasIfExist docker-compose podman-compose
aliasIfExist docker podman
alias kreload='kquitapp5 plasmashell; plasmashell --replace &'

# source /etc/profile.d/flatpak.sh
source "$HOME/.cargo/env"

